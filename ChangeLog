2022-09-12  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor.py:

	  - Renamed from clock_sensor_esp32.py

	* conf/clock_sensor/clock_sensor_rp2040.conf:

	  - Renamed from clock_sensor_picow.conf

	* apps/clock_sensor/standalone_sensor_esp32.py:
	* conf/clock_sensor/standalone_sensor_esp8266.conf:

	  - Deleted. No logner needed as clock_sensor.py can be configured to
	    run without a display.


2022-09-12  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* conf/clock_sensor/clock_sensor_esp8266_nodisplay.conf:

	  - Added new no-display sample config.

	* conf/clock_sensor/clock_sensor_esp8266.conf:
	* conf/clock_sensor/clock_sensor_picow.conf:

	  - Cleanup.


2022-09-11  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - I2CDisplay: now forces full initial update.

	  - Periodic: removed the now unused param in tick() and _fire().

	  - I2CDisplay and WS now register their set() methods as listeners
	    to the sensors.

	  - Periodic: tick() and _fire() now takes a now argument.

	  - I2CDisplay: new set() method to set sensor data independently from
	    scheduled tick updates.


2022-09-11  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/webserver.py:

	  - Added set() and clear() webserver methods for setting and clearing
	    request map.

	  - webserver constructor no longer take request map as argument

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - WS: Use webserver set() method.


2022-09-10  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - WS() will now only do string replacements for variables that are
	    actually referenced by the configured template.


2022-09-09  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/xconfig.py:

	  - Module will no longer automatically parse and load config into
	    internal dict. There is now an option to parse config on demand
	    to sacrifice efficiency for smaller mem footprint.


2022-09-08  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/xtime.py:

	  - Added convenience wrapper functions for taking and comparing time
	    points:

	      - xtime.tp_now(): retuns a time point with ms resolution
	      - xtime.tp_diff(): returns difference in ms between two time
	        points.

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Use new xtime time point functions.


2022-09-07  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/xtime.py:

	  - Some micropython ports have a fake time.localtime() function that
	    just calls time.gmtime(), some don't. Apply our own TZ data offset
	    implementation only on those that don't.


2022-09-07  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Now uses time.ticks_*() functions instead of time.time_ns()
	    because on some ports (rp2 in particular), time.time_ns()
	    is rounded off to the nearest second.


2022-09-07  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/xtime.py:

	  - Time operations on rp2 platforms are now offset correctly to
	    embedded epoch (2000/01/01).

	  - New module constant: EPOCH_OFFSET.

	  - Tidy up to ensure everything works on ports that use unix
	    epoch and on ports that use embedded epoch.


2022-09-06  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Webserver text is now defined by the WEBSRV_TEMPLATE config param.

	    Template variables:

	    - %TS%: seconds since epoch, XXXXXXXXXX
	    - %Sn_HUMI%: sensor n humidity, XXX.XXX
	    - %Sn_TEMP%: sensor n temperature, +XX.XXX
	    - %Sn_PRES%: sensor n pressure, XXXX.XXX

	* conf/clock_sensor/clock_sensor_esp32.conf:
	* conf/clock_sensor/clock_sensor_esp8266.conf:
	* conf/clock_sensor/clock_sensor_picow.conf:

	  - Added: WEBSRV_TEMPLATE


2022-09-06  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Display lines are now defined by the DISPLAY_TEMPLATE config param.
	    Lines are colon separated.

	    Template variables:

	      - %LDATE%: long date, DD/MM/YYYY
	      - %SDATE%: short date, DD/MM/YY
	      - %TIME%: time, HH:MM:SS
	      - %Sn_HUMI%: sensor n humidity, XXX.X%
	      - %Sn_TEMP%: sensor n temperature, +XX.XC
	      - %Sn_PRES%: sensor n pressure, XXXX.XhPa
	      - %NBSP%: space
	      - %COLON%: colon

	* conf/clock_sensor/clock_sensor_esp32.conf:
	* conf/clock_sensor/clock_sensor_esp8266.conf:
	* conf/clock_sensor/clock_sensor_picow.conf:

	  - Removed: DISPLAY_MODE
	  - Added: DISPLAY_TEMPLATE


2022-09-03  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Factored out duplicated code into a lot of class hierarchies. New
	    code is too big to run on an ESP8266, but will fix that soon.

	* conf/clock_sensor/clock_sensor_esp32.conf
	* conf/clock_sensor/clock_sensor_esp8266.conf
	* conf/clock_sensor/clock_sensor_picow.conf

	  - Added: DISPLAY_MODULE
	  - Added: SENSOR1_MODULE
	  - Renamed: SENSOR_I2C_ADDR to SENSOR[12]_I2C_ADDR
	  - Renamed: SENSOR_INTERVAL to SENSOR[12]_INTERVAL
	  - Renamed: LED_FLAG_INVERT to LED_INVERT
	  - Renamed: REMOTE_HOST to SENSOR[12]_HOST
	  - Renamed: REMOTE_PORT to SENSOR[12]_PORT
	  - Renamed: REMOTE_PATH to SENSOR[12]_PATH
	  - Renamed: REMOTE_INTERVAL to SENSOR[12]_INTERVAL


2022-08-29  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Added support for string-type GPIO pin identifier.

	* conf/clock_sensor/clock_sensor_picow.conf:

	  - Added clock_sensor.py configuration for Raspberry Pi Pico W.


2022-08-28  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Added support for simultaneous display of local sensor and remote
	    remote sensor queried over HTTP.

	* lib/webclient.py:
	* lib/webserver.py:

	  - Reduce read buffer size to 32 B.
	  

2022-08-28  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:
	* apps/clock_sensor/standalone_sensor.py:

	  - Added initialisation console messages.

	  - Reordered global var initialisation.


	* conf/clock_sensor_esp32.conf:
	* conf/clock_sensor_esp8266.conf:

	  - Renamed the following config parameters:

	    * PIN_LED --> LED_PIN
	    * PIN_I2C_SDA --> I2C_PIN_SDA
	    * PIN_I2C_SCL --> I2C_PIN_SCL
	    * DISPLAY_FLAG_4LINES --> DISPLAY_MODE
	    * INTERVAL_DSPLY --> DISPLAY_INTERVAL
	    * INTERVAL_PROBE --> SENSOR_INTERVAL
	    * INTERVAL_TSYNC --> NTP_INTERVAL
	    * HTTP_PATH --> WEBSRV_PATH
	    * HTTP_PORT --> WEBSRV_PORT
	    * HTTP_TIMEOUT --> WEBSRV_TIMEOUT

	* conf/standalone_sensor.conf:

	  - Renamed the following config parameters:

	    * PIN_LED --> LED_PIN
	    * PIN_I2C_SDA --> I2C_PIN_SDA
	    * PIN_I2C_SCL --> I2C_PIN_SCL
	    * INTERVAL_PROBE --> SENSOR1_INTERVAL, SENSOR2_INTERVAL
	    * INTERVAL_TSYNC --> NTP_INTERVAL
	    * HTTP_PATH --> WEBSRV_PATH
	    * HTTP_PORT --> WEBSRV_PORT
	    * HTTP_TIMEOUT --> WEBSRV_TIMEOUT


2022-08-28  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:
	* apps/clock_sensor/standalone_sensor.py:

	  - Fixed off-by-one interval calculation error.

	* apps/clock_sensor/clock_sensor_esp32.py:
	* conf/clock_sensor_esp32.conf:
	* conf/clock_sensor_esp8266.conf:

	  - Added INTERVAL_DSPLY configuration parameter to control
	    display refesh interval.

	* apps/clock_sensor/clock_sensor_rpi.py:
	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Fixed display text formatting.


2022-08-26  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Tidy up: removed conditional module loading.
	
	* apps/clock_sensor/clock_sensor_esp32.py:
	* apps/clock_sensor/standalone_sensor_esp32.py:
	* conf/clock_sensor_esp32.conf:
	* conf/clock_sensor_esp8266.conf:
	* conf/standalone_sensor_esp8266.conf:

	  - Removed redundant *_ENABLED configuration parameters.

	  - Added TICK_PERIOD (msecs per tick) configuration parameter.


2022-08-25  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/webclient.py:
	* lib/webserver.py:

	  - Reduced blocksize to reduce memory requirement.


2022-08-23  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/webclient.py:

	  - Added rudimentary GET only HTTP 1.0 client.

	  - Now uses poll() to detect connection status.


2022-08-20  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/webserver.py:

	  - Client doesn't need separate input and output buffers.

	  - Replaced select() with poll() for some Micropython ports that
	    don't have it.


2022-08-16  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/webserver.py:

	  - Added Content-Length header in server response.

	* apps/clock_sensor/clock_sensor_esp32.py:
	* apps/clock_sensor/standalone_sensor_esp32.py:

	  - Added CR+LF after HTTP body content.


2022-08-05  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/sensors/mpu6050.py:
	* tests/mpu6050_test.py:

	  - Added very basic MPU6050 driver and test code.


2022-07-31  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/standalone_sensor_esp32.py:

	  - Set sensor repeatability/oversampling to "high".


2022-07-29  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/standalone_sensor_esp32.py:
	* conf/standalone_sensor_esp8266.conf:

	  - Added new application and config for a standalone sensor
	    webserver.


2022-07-24  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* lib/wifi.py:

	  - Disable AP interface by default.


2022-07-06  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:
	* conf/clock_sensor_esp32.conf:
	* conf/clock_sensor_esp8266.conf:

	  - Added the following new boolean configuration parameters to
	    enable/disable the display, sensor and LED indicator,
	    respectively:

	    DISPLAY_FLAG_ENABLED
	    SENSOR_FLAG_ENABLED
	    LED_FLAG_ENABLED


2022-01-15  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* apps/clock_sensor/clock_sensor_esp32.py:

	  - Wifi connection is now verbose.

	* lib/wifi.py:

	  - Now uses xconfig.

	* lib/sensors/am2320.py:
	* tests/am2320_test.py:

	  - Added driver and test code for AM2320 humidity and temperature
	    sensor.

	* lib/sensors/sht30.py:

	  - Now possible to set to single-shot mode from continuous.

	* lib/sensors/bme280.py:

	  - Re-read chip data after a soft reset.


2022-01-14  Vino Fernando Crescini  <vfcrescini@gmail.com>

	* VERSION:

	  - Updated to v0.0.1.

	* ChangeLog:

	  - Change log started.
